// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : fifo_w128x256_r64_buffer.v
// Device     : 
// LiteX sha1 : 4368d5a9e
// Date       : 2024-11-08 12:23:07
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module fifo_w128x256_r64_buffer (
    input  wire          clk,
    output wire          empty,
    output wire          full,
    output wire   [31:0] rd_cnt,
    output wire   [63:0] rd_data,
    input  wire          rd_en,
    input  wire          rst,
    output wire   [31:0] wr_cnt,
    input  wire  [127:0] wr_data,
    input  wire          wr_en
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          cdc_sink_first;
wire          cdc_sink_last;
wire  [127:0] cdc_sink_payload_data;
wire          cdc_sink_ready;
wire          cdc_sink_valid;
wire          cdc_source_first;
wire          cdc_source_last;
wire  [127:0] cdc_source_payload_data;
wire          cdc_source_ready;
wire          cdc_source_valid;
wire          converter_first;
wire          converter_last;
reg           converter_mux = 1'd0;
wire          converter_sink_first;
wire          converter_sink_last;
wire  [127:0] converter_sink_payload_data;
wire          converter_sink_ready;
wire          converter_sink_valid;
wire          converter_source_first;
wire          converter_source_last;
reg    [63:0] converter_source_payload_data = 64'd0;
wire          converter_source_payload_valid_token_count;
wire          converter_source_ready;
wire          converter_source_valid;
wire          rd_clk;
wire          rd_rst;
reg           sink_sink_first = 1'd0;
reg           sink_sink_last = 1'd0;
wire  [127:0] sink_sink_payload_data;
wire          sink_sink_ready;
wire          sink_sink_valid;
wire          source_source_first0;
wire          source_source_first1;
wire          source_source_last0;
wire          source_source_last1;
wire   [63:0] source_source_payload_data0;
wire   [63:0] source_source_payload_data1;
reg           source_source_ready0 = 1'd0;
wire          source_source_ready1;
wire          source_source_valid0;
wire          source_source_valid1;
reg     [7:0] syncfifo_consume = 8'd0;
wire          syncfifo_do_read;
wire          syncfifo_fifo_in_first;
wire          syncfifo_fifo_in_last;
wire  [127:0] syncfifo_fifo_in_payload_data;
wire          syncfifo_fifo_out_first;
wire          syncfifo_fifo_out_last;
wire  [127:0] syncfifo_fifo_out_payload_data;
reg     [8:0] syncfifo_level0 = 9'd0;
wire    [8:0] syncfifo_level1;
reg     [7:0] syncfifo_produce = 8'd0;
wire    [7:0] syncfifo_rdport_adr;
wire  [129:0] syncfifo_rdport_dat_r;
wire          syncfifo_rdport_re;
wire          syncfifo_re;
reg           syncfifo_readable = 1'd0;
reg           syncfifo_replace = 1'd0;
wire          syncfifo_sink_first;
wire          syncfifo_sink_last;
wire  [127:0] syncfifo_sink_payload_data;
wire          syncfifo_sink_ready;
wire          syncfifo_sink_valid;
wire          syncfifo_source_first;
wire          syncfifo_source_last;
wire  [127:0] syncfifo_source_payload_data;
wire          syncfifo_source_ready;
wire          syncfifo_source_valid;
wire  [129:0] syncfifo_syncfifo_din;
wire  [129:0] syncfifo_syncfifo_dout;
wire          syncfifo_syncfifo_re;
wire          syncfifo_syncfifo_readable;
wire          syncfifo_syncfifo_we;
wire          syncfifo_syncfifo_writable;
reg     [7:0] syncfifo_wrport_adr = 8'd0;
wire  [129:0] syncfifo_wrport_dat_r;
wire  [129:0] syncfifo_wrport_dat_w;
wire          syncfifo_wrport_we;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign rd_clk = clk;
assign rd_rst = rst;
assign sink_sink_valid = wr_en;
assign sink_sink_payload_data = wr_data;
assign rd_data = source_source_payload_data0;
assign full = (~sink_sink_ready);
assign empty = (~source_source_valid0);
assign wr_cnt = syncfifo_level1;
assign rd_cnt = syncfifo_level1;
assign syncfifo_syncfifo_din = {syncfifo_fifo_in_last, syncfifo_fifo_in_first, syncfifo_fifo_in_payload_data};
assign {syncfifo_fifo_out_last, syncfifo_fifo_out_first, syncfifo_fifo_out_payload_data} = syncfifo_syncfifo_dout;
assign syncfifo_sink_ready = syncfifo_syncfifo_writable;
assign syncfifo_syncfifo_we = syncfifo_sink_valid;
assign syncfifo_fifo_in_first = syncfifo_sink_first;
assign syncfifo_fifo_in_last = syncfifo_sink_last;
assign syncfifo_fifo_in_payload_data = syncfifo_sink_payload_data;
assign syncfifo_source_valid = syncfifo_readable;
assign syncfifo_source_first = syncfifo_fifo_out_first;
assign syncfifo_source_last = syncfifo_fifo_out_last;
assign syncfifo_source_payload_data = syncfifo_fifo_out_payload_data;
assign syncfifo_re = syncfifo_source_ready;
assign syncfifo_syncfifo_re = (syncfifo_syncfifo_readable & ((~syncfifo_readable) | syncfifo_re));
assign syncfifo_level1 = (syncfifo_level0 + syncfifo_readable);
always @(*) begin
    syncfifo_wrport_adr <= 8'd0;
    if (syncfifo_replace) begin
        syncfifo_wrport_adr <= (syncfifo_produce - 1'd1);
    end else begin
        syncfifo_wrport_adr <= syncfifo_produce;
    end
end
assign syncfifo_wrport_dat_w = syncfifo_syncfifo_din;
assign syncfifo_wrport_we = (syncfifo_syncfifo_we & (syncfifo_syncfifo_writable | syncfifo_replace));
assign syncfifo_do_read = (syncfifo_syncfifo_readable & syncfifo_syncfifo_re);
assign syncfifo_rdport_adr = syncfifo_consume;
assign syncfifo_syncfifo_dout = syncfifo_rdport_dat_r;
assign syncfifo_rdport_re = syncfifo_do_read;
assign syncfifo_syncfifo_writable = (syncfifo_level0 != 9'd256);
assign syncfifo_syncfifo_readable = (syncfifo_level0 != 1'd0);
assign cdc_source_valid = cdc_sink_valid;
assign cdc_sink_ready = cdc_source_ready;
assign cdc_source_first = cdc_sink_first;
assign cdc_source_last = cdc_sink_last;
assign cdc_source_payload_data = cdc_sink_payload_data;
assign source_source_valid1 = converter_source_valid;
assign converter_source_ready = source_source_ready1;
assign source_source_first1 = converter_source_first;
assign source_source_last1 = converter_source_last;
assign source_source_payload_data1 = converter_source_payload_data;
assign converter_first = (converter_mux == 1'd0);
assign converter_last = (converter_mux == 1'd1);
assign converter_source_valid = converter_sink_valid;
assign converter_source_first = (converter_sink_first & converter_first);
assign converter_source_last = (converter_sink_last & converter_last);
assign converter_sink_ready = (converter_last & converter_source_ready);
always @(*) begin
    converter_source_payload_data <= 64'd0;
    case (converter_mux)
        1'd0: begin
            converter_source_payload_data <= converter_sink_payload_data[63:0];
        end
        default: begin
            converter_source_payload_data <= converter_sink_payload_data[127:64];
        end
    endcase
end
assign converter_source_payload_valid_token_count = converter_last;
assign syncfifo_sink_valid = sink_sink_valid;
assign sink_sink_ready = syncfifo_sink_ready;
assign syncfifo_sink_first = sink_sink_first;
assign syncfifo_sink_last = sink_sink_last;
assign syncfifo_sink_payload_data = sink_sink_payload_data;
assign cdc_sink_valid = syncfifo_source_valid;
assign syncfifo_source_ready = cdc_sink_ready;
assign cdc_sink_first = syncfifo_source_first;
assign cdc_sink_last = syncfifo_source_last;
assign cdc_sink_payload_data = syncfifo_source_payload_data;
assign converter_sink_valid = cdc_source_valid;
assign cdc_source_ready = converter_sink_ready;
assign converter_sink_first = cdc_source_first;
assign converter_sink_last = cdc_source_last;
assign converter_sink_payload_data = cdc_source_payload_data;
assign source_source_valid0 = source_source_valid1;
assign source_source_ready1 = source_source_ready0;
assign source_source_first0 = source_source_first1;
assign source_source_last0 = source_source_last1;
assign source_source_payload_data0 = source_source_payload_data1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge rd_clk) begin
    source_source_ready0 <= rd_en;
    if (syncfifo_syncfifo_re) begin
        syncfifo_readable <= 1'd1;
    end else begin
        if (syncfifo_re) begin
            syncfifo_readable <= 1'd0;
        end
    end
    if (((syncfifo_syncfifo_we & syncfifo_syncfifo_writable) & (~syncfifo_replace))) begin
        syncfifo_produce <= (syncfifo_produce + 1'd1);
    end
    if (syncfifo_do_read) begin
        syncfifo_consume <= (syncfifo_consume + 1'd1);
    end
    if (((syncfifo_syncfifo_we & syncfifo_syncfifo_writable) & (~syncfifo_replace))) begin
        if ((~syncfifo_do_read)) begin
            syncfifo_level0 <= (syncfifo_level0 + 1'd1);
        end
    end else begin
        if (syncfifo_do_read) begin
            syncfifo_level0 <= (syncfifo_level0 - 1'd1);
        end
    end
    if ((converter_source_valid & converter_source_ready)) begin
        if (converter_last) begin
            converter_mux <= 1'd0;
        end else begin
            converter_mux <= (converter_mux + 1'd1);
        end
    end
    if (rd_rst) begin
        source_source_ready0 <= 1'd0;
        syncfifo_readable <= 1'd0;
        syncfifo_level0 <= 9'd0;
        syncfifo_produce <= 8'd0;
        syncfifo_consume <= 8'd0;
        converter_mux <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 256-words x 130-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 130 
// Port 1 | Read: Sync  | Write: ---- | 
reg [129:0] storage[0:255];
reg [129:0] storage_dat0;
reg [129:0] storage_dat1;
always @(posedge rd_clk) begin
	if (syncfifo_wrport_we)
		storage[syncfifo_wrport_adr] <= syncfifo_wrport_dat_w;
	storage_dat0 <= storage[syncfifo_wrport_adr];
end
always @(posedge rd_clk) begin
	if (syncfifo_rdport_re)
		storage_dat1 <= storage[syncfifo_rdport_adr];
end
assign syncfifo_wrport_dat_r = storage_dat0;
assign syncfifo_rdport_dat_r = storage_dat1;


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-11-08 12:23:07.
//------------------------------------------------------------------------------
