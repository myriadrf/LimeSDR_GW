// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : fifo_w64x256_r64.v
// Device     : 
// LiteX sha1 : c1225736a
// Date       : 2024-11-07 07:41:10
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module fifo_w64x256_r64 (
    output wire          empty,
    output wire          full,
    input  wire          rd_clk,
    output wire   [31:0] rd_cnt,
    output wire   [63:0] rd_data,
    input  wire          rd_en,
    input  wire          rd_rst,
    input  wire          wr_clk,
    output wire   [31:0] wr_cnt,
    input  wire   [63:0] wr_data,
    input  wire          wr_en,
    input  wire          wr_rst
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          cdc_cd_rst;
wire   [65:0] cdc_cdc_asyncfifo_din;
wire   [65:0] cdc_cdc_asyncfifo_dout;
wire          cdc_cdc_asyncfifo_re;
wire          cdc_cdc_asyncfifo_readable;
wire          cdc_cdc_asyncfifo_we;
wire          cdc_cdc_asyncfifo_writable;
wire    [2:0] cdc_cdc_consume_wdomain;
wire          cdc_cdc_fifo_in_first;
wire          cdc_cdc_fifo_in_last;
wire   [63:0] cdc_cdc_fifo_in_payload_data;
wire          cdc_cdc_fifo_out_first;
wire          cdc_cdc_fifo_out_last;
wire   [63:0] cdc_cdc_fifo_out_payload_data;
wire          cdc_cdc_graycounter0_ce;
(* syn_no_retiming = "true" *)
reg     [2:0] cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] cdc_cdc_graycounter0_q_next;
reg     [2:0] cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          cdc_cdc_graycounter1_ce;
(* syn_no_retiming = "true" *)
reg     [2:0] cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] cdc_cdc_graycounter1_q_next;
reg     [2:0] cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] cdc_cdc_produce_rdomain;
wire    [1:0] cdc_cdc_rdport_adr;
wire   [65:0] cdc_cdc_rdport_dat_r;
wire          cdc_cdc_sink_first;
wire          cdc_cdc_sink_last;
wire   [63:0] cdc_cdc_sink_payload_data;
wire          cdc_cdc_sink_ready;
wire          cdc_cdc_sink_valid;
wire          cdc_cdc_source_first;
wire          cdc_cdc_source_last;
wire   [63:0] cdc_cdc_source_payload_data;
wire          cdc_cdc_source_ready;
wire          cdc_cdc_source_valid;
wire    [1:0] cdc_cdc_wrport_adr;
wire   [65:0] cdc_cdc_wrport_dat_r;
wire   [65:0] cdc_cdc_wrport_dat_w;
wire          cdc_cdc_wrport_we;
wire          cdc_sink_sink_first;
wire          cdc_sink_sink_last;
wire   [63:0] cdc_sink_sink_payload_data;
wire          cdc_sink_sink_ready;
wire          cdc_sink_sink_valid;
wire          cdc_source_source_first;
wire          cdc_source_source_last;
wire   [63:0] cdc_source_source_payload_data;
wire          cdc_source_source_ready;
wire          cdc_source_source_valid;
wire          converter_converter_sink_first;
wire          converter_converter_sink_last;
wire   [63:0] converter_converter_sink_payload_data;
wire          converter_converter_sink_ready;
wire          converter_converter_sink_valid;
wire          converter_converter_source_first;
wire          converter_converter_source_last;
wire   [63:0] converter_converter_source_payload_data;
wire          converter_converter_source_payload_valid_token_count;
wire          converter_converter_source_ready;
wire          converter_converter_source_valid;
wire          converter_source_source_first;
wire          converter_source_source_last;
wire   [63:0] converter_source_source_payload_data;
wire          converter_source_source_ready;
wire          converter_source_source_valid;
wire          from133_clk;
wire          from133_rst;
(* syn_no_retiming = "true" *)
reg     [2:0] multiregimpl00 = 3'd0;
(* syn_no_retiming = "true" *)
reg     [2:0] multiregimpl01 = 3'd0;
(* syn_no_retiming = "true" *)
reg     [2:0] multiregimpl10 = 3'd0;
(* syn_no_retiming = "true" *)
reg     [2:0] multiregimpl11 = 3'd0;
wire          rd_clk_1;
wire          rd_rst_1;
wire          rst10;
wire          rst11;
reg           sink_sink_first = 1'd0;
reg           sink_sink_last = 1'd0;
wire   [63:0] sink_sink_payload_data;
wire          sink_sink_ready;
wire          sink_sink_valid;
wire          source_source_first;
wire          source_source_last;
wire   [63:0] source_source_payload_data;
wire          source_source_ready;
wire          source_source_valid;
reg     [7:0] syncfifo_consume = 8'd0;
wire          syncfifo_do_read;
wire          syncfifo_fifo_in_first;
wire          syncfifo_fifo_in_last;
wire   [63:0] syncfifo_fifo_in_payload_data;
wire          syncfifo_fifo_out_first;
wire          syncfifo_fifo_out_last;
wire   [63:0] syncfifo_fifo_out_payload_data;
reg     [8:0] syncfifo_level = 9'd0;
reg     [7:0] syncfifo_produce = 8'd0;
wire    [7:0] syncfifo_rdport_adr;
wire   [65:0] syncfifo_rdport_dat_r;
reg           syncfifo_replace = 1'd0;
wire          syncfifo_sink_first;
wire          syncfifo_sink_last;
wire   [63:0] syncfifo_sink_payload_data;
wire          syncfifo_sink_ready;
wire          syncfifo_sink_valid;
wire          syncfifo_source_first;
wire          syncfifo_source_last;
wire   [63:0] syncfifo_source_payload_data;
wire          syncfifo_source_ready;
wire          syncfifo_source_valid;
wire   [65:0] syncfifo_syncfifo_din;
wire   [65:0] syncfifo_syncfifo_dout;
wire          syncfifo_syncfifo_re;
wire          syncfifo_syncfifo_readable;
wire          syncfifo_syncfifo_we;
wire          syncfifo_syncfifo_writable;
reg     [7:0] syncfifo_wrport_adr = 8'd0;
wire   [65:0] syncfifo_wrport_dat_r;
wire   [65:0] syncfifo_wrport_dat_w;
wire          syncfifo_wrport_we;
wire          to133_clk;
wire          to133_rst;
wire          wr_clk_1;
wire          wr_rst_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign wr_clk_1 = wr_clk;
assign wr_rst_1 = wr_rst;
assign rd_clk_1 = rd_clk;
assign rd_rst_1 = rd_rst;
assign sink_sink_valid = wr_en;
assign sink_sink_payload_data = wr_data;
assign source_source_ready = rd_en;
assign rd_data = source_source_payload_data;
assign full = (~sink_sink_ready);
assign empty = (~source_source_valid);
assign wr_cnt = syncfifo_level;
assign rd_cnt = syncfifo_level;
assign syncfifo_syncfifo_din = {syncfifo_fifo_in_last, syncfifo_fifo_in_first, syncfifo_fifo_in_payload_data};
assign {syncfifo_fifo_out_last, syncfifo_fifo_out_first, syncfifo_fifo_out_payload_data} = syncfifo_syncfifo_dout;
assign syncfifo_sink_ready = syncfifo_syncfifo_writable;
assign syncfifo_syncfifo_we = syncfifo_sink_valid;
assign syncfifo_fifo_in_first = syncfifo_sink_first;
assign syncfifo_fifo_in_last = syncfifo_sink_last;
assign syncfifo_fifo_in_payload_data = syncfifo_sink_payload_data;
assign syncfifo_source_valid = syncfifo_syncfifo_readable;
assign syncfifo_source_first = syncfifo_fifo_out_first;
assign syncfifo_source_last = syncfifo_fifo_out_last;
assign syncfifo_source_payload_data = syncfifo_fifo_out_payload_data;
assign syncfifo_syncfifo_re = syncfifo_source_ready;
always @(*) begin
    syncfifo_wrport_adr <= 8'd0;
    if (syncfifo_replace) begin
        syncfifo_wrport_adr <= (syncfifo_produce - 1'd1);
    end else begin
        syncfifo_wrport_adr <= syncfifo_produce;
    end
end
assign syncfifo_wrport_dat_w = syncfifo_syncfifo_din;
assign syncfifo_wrport_we = (syncfifo_syncfifo_we & (syncfifo_syncfifo_writable | syncfifo_replace));
assign syncfifo_do_read = (syncfifo_syncfifo_readable & syncfifo_syncfifo_re);
assign syncfifo_rdport_adr = syncfifo_consume;
assign syncfifo_syncfifo_dout = syncfifo_rdport_dat_r;
assign syncfifo_syncfifo_writable = (syncfifo_level != 9'd256);
assign syncfifo_syncfifo_readable = (syncfifo_level != 1'd0);
assign from133_clk = wr_clk_1;
assign to133_clk = rd_clk_1;
assign cdc_cd_rst = (wr_rst_1 | rd_rst_1);
assign cdc_cdc_sink_valid = cdc_sink_sink_valid;
assign cdc_sink_sink_ready = cdc_cdc_sink_ready;
assign cdc_cdc_sink_first = cdc_sink_sink_first;
assign cdc_cdc_sink_last = cdc_sink_sink_last;
assign cdc_cdc_sink_payload_data = cdc_sink_sink_payload_data;
assign cdc_source_source_valid = cdc_cdc_source_valid;
assign cdc_cdc_source_ready = cdc_source_source_ready;
assign cdc_source_source_first = cdc_cdc_source_first;
assign cdc_source_source_last = cdc_cdc_source_last;
assign cdc_source_source_payload_data = cdc_cdc_source_payload_data;
assign cdc_cdc_asyncfifo_din = {cdc_cdc_fifo_in_last, cdc_cdc_fifo_in_first, cdc_cdc_fifo_in_payload_data};
assign {cdc_cdc_fifo_out_last, cdc_cdc_fifo_out_first, cdc_cdc_fifo_out_payload_data} = cdc_cdc_asyncfifo_dout;
assign cdc_cdc_sink_ready = cdc_cdc_asyncfifo_writable;
assign cdc_cdc_asyncfifo_we = cdc_cdc_sink_valid;
assign cdc_cdc_fifo_in_first = cdc_cdc_sink_first;
assign cdc_cdc_fifo_in_last = cdc_cdc_sink_last;
assign cdc_cdc_fifo_in_payload_data = cdc_cdc_sink_payload_data;
assign cdc_cdc_source_valid = cdc_cdc_asyncfifo_readable;
assign cdc_cdc_source_first = cdc_cdc_fifo_out_first;
assign cdc_cdc_source_last = cdc_cdc_fifo_out_last;
assign cdc_cdc_source_payload_data = cdc_cdc_fifo_out_payload_data;
assign cdc_cdc_asyncfifo_re = cdc_cdc_source_ready;
assign cdc_cdc_graycounter0_ce = (cdc_cdc_asyncfifo_writable & cdc_cdc_asyncfifo_we);
assign cdc_cdc_graycounter1_ce = (cdc_cdc_asyncfifo_readable & cdc_cdc_asyncfifo_re);
assign cdc_cdc_asyncfifo_writable = (((cdc_cdc_graycounter0_q[2] == cdc_cdc_consume_wdomain[2]) | (cdc_cdc_graycounter0_q[1] == cdc_cdc_consume_wdomain[1])) | (cdc_cdc_graycounter0_q[0] != cdc_cdc_consume_wdomain[0]));
assign cdc_cdc_asyncfifo_readable = (cdc_cdc_graycounter1_q != cdc_cdc_produce_rdomain);
assign cdc_cdc_wrport_adr = cdc_cdc_graycounter0_q_binary[1:0];
assign cdc_cdc_wrport_dat_w = cdc_cdc_asyncfifo_din;
assign cdc_cdc_wrport_we = cdc_cdc_graycounter0_ce;
assign cdc_cdc_rdport_adr = cdc_cdc_graycounter1_q_next_binary[1:0];
assign cdc_cdc_asyncfifo_dout = cdc_cdc_rdport_dat_r;
always @(*) begin
    cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (cdc_cdc_graycounter0_ce) begin
        cdc_cdc_graycounter0_q_next_binary <= (cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        cdc_cdc_graycounter0_q_next_binary <= cdc_cdc_graycounter0_q_binary;
    end
end
assign cdc_cdc_graycounter0_q_next = (cdc_cdc_graycounter0_q_next_binary ^ cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (cdc_cdc_graycounter1_ce) begin
        cdc_cdc_graycounter1_q_next_binary <= (cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        cdc_cdc_graycounter1_q_next_binary <= cdc_cdc_graycounter1_q_binary;
    end
end
assign cdc_cdc_graycounter1_q_next = (cdc_cdc_graycounter1_q_next_binary ^ cdc_cdc_graycounter1_q_next_binary[2:1]);
assign converter_source_source_valid = converter_converter_source_valid;
assign converter_converter_source_ready = converter_source_source_ready;
assign converter_source_source_first = converter_converter_source_first;
assign converter_source_source_last = converter_converter_source_last;
assign converter_source_source_payload_data = converter_converter_source_payload_data;
assign converter_converter_source_valid = converter_converter_sink_valid;
assign converter_converter_sink_ready = converter_converter_source_ready;
assign converter_converter_source_first = converter_converter_sink_first;
assign converter_converter_source_last = converter_converter_sink_last;
assign converter_converter_source_payload_data = converter_converter_sink_payload_data;
assign converter_converter_source_payload_valid_token_count = 1'd1;
assign syncfifo_sink_valid = sink_sink_valid;
assign sink_sink_ready = syncfifo_sink_ready;
assign syncfifo_sink_first = sink_sink_first;
assign syncfifo_sink_last = sink_sink_last;
assign syncfifo_sink_payload_data = sink_sink_payload_data;
assign cdc_sink_sink_valid = syncfifo_source_valid;
assign syncfifo_source_ready = cdc_sink_sink_ready;
assign cdc_sink_sink_first = syncfifo_source_first;
assign cdc_sink_sink_last = syncfifo_source_last;
assign cdc_sink_sink_payload_data = syncfifo_source_payload_data;
assign converter_converter_sink_valid = cdc_source_source_valid;
assign cdc_source_source_ready = converter_converter_sink_ready;
assign converter_converter_sink_first = cdc_source_source_first;
assign converter_converter_sink_last = cdc_source_source_last;
assign converter_converter_sink_payload_data = cdc_source_source_payload_data;
assign source_source_valid = converter_source_source_valid;
assign converter_source_source_ready = source_source_ready;
assign source_source_first = converter_source_source_first;
assign source_source_last = converter_source_source_last;
assign source_source_payload_data = converter_source_source_payload_data;
assign cdc_cdc_produce_rdomain = multiregimpl01;
assign cdc_cdc_consume_wdomain = multiregimpl11;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge from133_clk) begin
    cdc_cdc_graycounter0_q_binary <= cdc_cdc_graycounter0_q_next_binary;
    cdc_cdc_graycounter0_q <= cdc_cdc_graycounter0_q_next;
    if (from133_rst) begin
        cdc_cdc_graycounter0_q <= 3'd0;
        cdc_cdc_graycounter0_q_binary <= 3'd0;
    end
    multiregimpl10 <= cdc_cdc_graycounter1_q;
    multiregimpl11 <= multiregimpl10;
end

always @(posedge to133_clk) begin
    cdc_cdc_graycounter1_q_binary <= cdc_cdc_graycounter1_q_next_binary;
    cdc_cdc_graycounter1_q <= cdc_cdc_graycounter1_q_next;
    if (to133_rst) begin
        cdc_cdc_graycounter1_q <= 3'd0;
        cdc_cdc_graycounter1_q_binary <= 3'd0;
    end
    multiregimpl00 <= cdc_cdc_graycounter0_q;
    multiregimpl01 <= multiregimpl00;
end

always @(posedge wr_clk_1) begin
    if (((syncfifo_syncfifo_we & syncfifo_syncfifo_writable) & (~syncfifo_replace))) begin
        syncfifo_produce <= (syncfifo_produce + 1'd1);
    end
    if (syncfifo_do_read) begin
        syncfifo_consume <= (syncfifo_consume + 1'd1);
    end
    if (((syncfifo_syncfifo_we & syncfifo_syncfifo_writable) & (~syncfifo_replace))) begin
        if ((~syncfifo_do_read)) begin
            syncfifo_level <= (syncfifo_level + 1'd1);
        end
    end else begin
        if (syncfifo_do_read) begin
            syncfifo_level <= (syncfifo_level - 1'd1);
        end
    end
    if (wr_rst_1) begin
        syncfifo_level <= 9'd0;
        syncfifo_produce <= 8'd0;
        syncfifo_consume <= 8'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 256-words x 66-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 66 
// Port 1 | Read: Async | Write: ---- | 
reg [65:0] storage[0:255];
reg [65:0] storage_dat0;
always @(posedge wr_clk_1) begin
	if (syncfifo_wrport_we)
		storage[syncfifo_wrport_adr] <= syncfifo_wrport_dat_w;
	storage_dat0 <= storage[syncfifo_wrport_adr];
end
always @(posedge wr_clk_1) begin
end
assign syncfifo_wrport_dat_r = storage_dat0;
assign syncfifo_rdport_dat_r = storage[syncfifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_1: 4-words x 66-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 66 
// Port 1 | Read: Sync  | Write: ---- | 
reg [65:0] storage_1[0:3];
reg [65:0] storage_1_dat0;
reg [65:0] storage_1_dat1;
always @(posedge from133_clk) begin
	if (cdc_cdc_wrport_we)
		storage_1[cdc_cdc_wrport_adr] <= cdc_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[cdc_cdc_wrport_adr];
end
always @(posedge to133_clk) begin
	storage_1_dat1 <= storage_1[cdc_cdc_rdport_adr];
end
assign cdc_cdc_wrport_dat_r = storage_1_dat0;
assign cdc_cdc_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance FD1S3BX of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX(
	// Inputs.
	.CK (from133_clk),
	.D  (1'd0),
	.PD (cdc_cd_rst),

	// Outputs.
	.Q  (rst10)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_1 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_1(
	// Inputs.
	.CK (from133_clk),
	.D  (rst10),
	.PD (cdc_cd_rst),

	// Outputs.
	.Q  (from133_rst)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_2 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_2(
	// Inputs.
	.CK (to133_clk),
	.D  (1'd0),
	.PD (cdc_cd_rst),

	// Outputs.
	.Q  (rst11)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_3 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_3(
	// Inputs.
	.CK (to133_clk),
	.D  (rst11),
	.PD (cdc_cd_rst),

	// Outputs.
	.Q  (to133_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-11-07 07:41:10.
//------------------------------------------------------------------------------
