diff --git a/litex/build/lattice/diamond.py b/litex/build/lattice/diamond.py
index 6ab994ebc..5402ae273 100644
--- a/litex/build/lattice/diamond.py
+++ b/litex/build/lattice/diamond.py
@@ -36,6 +36,9 @@ class LatticeDiamondToolchain(GenericToolchain):
 
     def __init__(self):
         super().__init__()
+        self.additional_ldf_commands = []
+        self.post_par_commands       = []
+        self.post_export_commands    = []
 
     def build(self, platform, fragment,
         timingstrict   = False,
@@ -116,9 +119,24 @@ class LatticeDiamondToolchain(GenericToolchain):
         for filename, language, library, *copy in self.platform.sources:
             tcl.append("prj_src add \"{}\" -work {}".format(tcl_path(filename), library))
 
+        # Add IPs
+        for filename in self.platform.ips:
+            tcl.append("prj_src add \"{}\" -work {}".format(tcl_path(filename), library))
+
+        # Add SDCs
+        for filename in self.platform.sdcs:
+            tcl.append("prj_src add \"{}\" -format SDC".format(tcl_path(filename)))
+
+        # Add Strategy
+        for filename, strategy_name in self.platform.strategy:
+            tcl.append("prj_strgy import -name {} -file {}".format(strategy_name, tcl_path(filename)))
+
         # Set top level
         tcl.append("prj_impl option top \"{}\"".format(self._build_name))
 
+        # Add additional commands
+        tcl += self.additional_ldf_commands
+
         # Save project
         tcl.append("prj_project save")
 
@@ -127,10 +145,19 @@ class LatticeDiamondToolchain(GenericToolchain):
         tcl.append("prj_run Translate -impl impl")
         tcl.append("prj_run Map -impl impl")
         tcl.append("prj_run PAR -impl impl")
+
+        # Optionals commands to execute after PAR and before export 
+        for cmd in self.post_par_commands:
+            tcl.append(cmd)
+
         tcl.append("prj_run Export -impl impl -task Bitgen")
         if self._produces_jedec(self.platform.device):
             tcl.append("prj_run Export -impl impl -task Jedecgen")
 
+        # Optionals commands to execute after export
+        for cmd in self.post_export_commands:
+            tcl.append(cmd)
+
         # Close project
         tcl.append("prj_project close")
 
diff --git a/litex/build/lattice/platform.py b/litex/build/lattice/platform.py
index 79fcbe1f6..91f8f7327 100644
--- a/litex/build/lattice/platform.py
+++ b/litex/build/lattice/platform.py
@@ -5,6 +5,8 @@
 # Copyright (c) 2017 William D. Jones <thor0505@comcast.net>
 # SPDX-License-Identifier: BSD-2-Clause
 
+import os
+
 from litex.build.generic_platform import GenericPlatform
 from litex.build.lattice import common, diamond, icestorm, trellis, radiant, oxide
 
@@ -21,6 +23,9 @@ class LatticePlatform(GenericPlatform):
 
     def __init__(self, *args, toolchain="diamond", **kwargs):
         GenericPlatform.__init__(self, *args, **kwargs)
+        self.ips      = set()
+        self.sdcs     = set()
+        self.strategy = set()
         if toolchain == "diamond":
             self.toolchain = diamond.LatticeDiamondToolchain()
         elif toolchain == "trellis":
@@ -35,6 +40,15 @@ class LatticePlatform(GenericPlatform):
         else:
             raise ValueError(f"Unknown toolchain {toolchain}")
 
+    def add_ip(self, filename):
+        self.ips.add((os.path.abspath(filename)))
+
+    def add_sdc(self, filename):
+        self.sdcs.add((os.path.abspath(filename)))
+
+    def add_strategy(self, filename, strategy_name):
+        self.strategy.add((os.path.abspath(filename), strategy_name))
+
     def get_verilog(self, *args, special_overrides=dict(), **kwargs):
         so = dict()  # No common overrides between ECP5 and iCE40.
         so.update(self.toolchain.special_overrides)
diff --git a/litex/soc/cores/jtag.py b/litex/soc/cores/jtag.py
index 0b8b09a78..ade8256dd 100644
--- a/litex/soc/cores/jtag.py
+++ b/litex/soc/cores/jtag.py
@@ -341,7 +341,7 @@ class XilinxJTAG(LiteXModule):
 # ECP5 JTAG ----------------------------------------------------------------------------------------
 
 class ECP5JTAG(LiteXModule):
-    def __init__(self, tck_delay_luts=8):
+    def __init__(self, platform=None, tck_delay_luts=8):
         self.reset   = Signal()
         self.capture = Signal()
         self.shift   = Signal()
@@ -375,17 +375,31 @@ class ECP5JTAG(LiteXModule):
 
         # TDI/TCK are synchronous on JTAGG output (TDI being registered with TCK). Introduce a delay
         # on TCK with multiple LUT4s to allow its use as the JTAG Clk.
+        init_name = {True: "p_init", False: "p_INIT"}[platform.toolchain=="diamond"]
+        from litex.build.lattice.diamond import LatticeDiamondToolchain
         for i in range(tck_delay_luts):
             new_tck = Signal()
-            self.specials += Instance("LUT4",
-                attr   = {"keep"},
-                p_INIT = 2,
-                i_A = tck,
-                i_B = 0,
-                i_C = 0,
-                i_D = 0,
-                o_Z = new_tck
-            )
+            print(platform.toolchain)
+            if isinstance(platform.toolchain, LatticeDiamondToolchain):
+                self.specials += Instance("LUT4",
+                    attr   = {"keep"},
+                    p_init = 2,
+                    i_A    = tck,
+                    i_B    = 0,
+                    i_C    = 0,
+                    i_D    = 0,
+                    o_Z    = new_tck
+                )
+            else:
+                self.specials += Instance("LUT4",
+                    attr   = {"keep"},
+                    p_INIT = 2,
+                    i_A    = tck,
+                    i_B    = 0,
+                    i_C    = 0,
+                    i_D    = 0,
+                    o_Z    = new_tck
+                )
             tck = new_tck
         self.comb += self.tck.eq(tck)
 
@@ -425,7 +439,7 @@ class JTAGPHY(LiteXModule):
                 jtag_tdi_delay = XilinxJTAG.get_tdi_delay(device)
             # Lattice.
             elif device[:5] == "LFE5U":
-                jtag = ECP5JTAG()
+                jtag = ECP5JTAG(platform)
             # Efinix
             elif device[:2] == "Ti":
                 jtag = EfinixJTAG(platform)
